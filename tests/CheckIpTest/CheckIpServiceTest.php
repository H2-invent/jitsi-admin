<?php

namespace App\Tests\CheckIpTest;

use App\Service\CheckIPService;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;

class CheckIpServiceTest extends TestCase
{
   private CheckIPService $checkIPService;
   protected function setUp(): void
   {
       parent::setUp(); // TODO: Change the autogenerated stub
       $loggermock = $this->createMock(LoggerInterface::class);

       $this->checkIPService = new CheckIPService($loggermock);

   }

    public function testValidIPInRange() {
        // Testen, ob die IP-Adresse in der Range liegt
        $this->assertTrue($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.0/24'));
        $this->assertTrue($this->checkIPService->isIPInRange('10.0.0.5', '10.0.0.0/16'));
        $this->assertTrue($this->checkIPService->isIPInRange('172.16.0.1', '172.16.0.0/12'));
    }

    public function testInvalidIPInRange() {
        // Testen, ob die IP-Adresse nicht in der Range liegt
        $this->assertFalse($this->checkIPService->isIPInRange('192.168.2.10', '192.168.1.0/24'));
        $this->assertFalse($this->checkIPService->isIPInRange('10.1.0.5', '10.0.0.0/16'));
        $this->assertFalse($this->checkIPService->isIPInRange('172.51.0.1', '172.16.0.0/12'));
    }

    public function testSingleIPRange() {
        // Testen mit einer einzelnen IP-Adresse (Range ohne Subnetzmaske)
        $this->assertTrue($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.10'));
        $this->assertFalse($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.11'));
    }

    public function testInvalidInput() {
        // Testen mit ungültiger IP-Adresse und Range
        $this->assertFalse($this->checkIPService->isIPInRange('invalid_ip', '192.168.1.0/24'));
        $this->assertFalse($this->checkIPService->isIPInRange('192.168.1.10', 'invalid_range'));
    }

    public function testMinMaxIP() {
        // Testen mit der niedrigsten und höchsten möglichen IP-Adresse
        $this->assertTrue($this->checkIPService->isIPInRange('0.0.0.0', '0.0.0.0/0'));
        $this->assertTrue($this->checkIPService->isIPInRange('255.255.255.255', '0.0.0.0/0'));
    }
    public function testEmptyRange() {
        // Testen mit leerer IP Range
        $this->assertTrue($this->checkIPService->isIPInRange('0.0.0.0', null));
    }

    public function testCommaSeparatedList() {
        // Testen mit einer kommaseparierten Liste von IP-Adressen und IP-Ranges
        $this->assertTrue($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.0/24,10.0.0.0/16'));
        $this->assertTrue($this->checkIPService->isIPInRange('192.168.1.10', '10.0.0.0/16,192.168.1.0/24'));
        $this->assertFalse($this->checkIPService->isIPInRange('192.168.1.10', '10.0.0.0/16,172.16.0.0/12'));
        $this->assertTrue($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.10,172.16.0.0/12'));
        $this->assertTrue($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.11,192.168.1.10'));
        $this->assertTrue($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.11,192.168.1.09,192.168.1.10'));
        $this->assertFalse($this->checkIPService->isIPInRange('192.168.1.10', '192.168.1.11,192.168.1.09,192.168.1.13'));
        $this->assertFalse($this->checkIPService->isIPInRange('192.168.1.9', '192.168.1.11,172.16.0.10'));
    }

}
