<?php

namespace App\Tests\callOut;

use App\Entity\CallerId;
use App\Entity\CalloutSession;
use App\Repository\CalloutSessionRepository;
use App\Repository\RoomsRepository;
use App\Repository\UserRepository;
use App\Service\Callout\CallOutSessionAPIHoldService;
use App\Service\Lobby\DirectSendService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Mercure\Jwt\StaticTokenProvider;
use Symfony\Component\Mercure\MockHub;
use Symfony\Component\Mercure\Update;

class CalloutHoldApiFromRingingServiceTest extends KernelTestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $manager = self::getContainer()->get(EntityManagerInterface::class);
        $userRepo = self::getContainer()->get(UserRepository::class);
        $roomRepo = self::getContainer()->get(RoomsRepository::class);
        $room = $roomRepo->findOneBy(array('name' => 'TestMeeting: 0'));
        $user = $userRepo->findOneBy(array('email' => 'ldapUser@local.de'));

        $calloutSession1 = new CalloutSession();
        $calloutSession1->setUser($user)
            ->setRoom($room)
            ->setCreatedAt(new \DateTime())
            ->setInvitedFrom($room->getModerator())
            ->setState(15)
            ->setUid('ksdlfjlkfds')
            ->setLeftRetries(2);
        $manager->persist($calloutSession1);
        $callerUserId = new CallerId();
        $callerUserId->setCreatedAt(new \DateTime())
            ->setRoom($room)
            ->setUser($user)
            ->setCallerId('987654321');
        $manager->persist($callerUserId);
        $manager->flush();
    }

    public function testLater(): void
    {
        $kernel = self::bootKernel();


        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        self::assertEquals(array(
            'status' => 'ON_HOLD',
            'pin' => '987654321',
            'room_number' => '12340',
            'links' => array(),
        ), $calloutHoldService->later('ksdlfjlkfds'));
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        self::assertEquals(CalloutSession::$LATER, $callout->getState());
        self::assertEquals(array('error' => true, 'reason' => 'NO_SESSION_ID_FOUND'), $calloutHoldService->later('invalid'));

    }

    public function testRinging(): void
    {
        $kernel = self::bootKernel();


        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        self::assertEquals(array(
            'status' => 'RINGING',
            'pin' => '987654321',
            'room_number' => '12340',
            'links' => array(),
        ), $calloutHoldService->ringing('ksdlfjlkfds'));
        self::assertEquals(array(
            'status' => 'RINGING',
            'pin' => '987654321',
            'room_number' => '12340',
            'links' => array(),
        ), $calloutHoldService->ringing('ksdlfjlkfds'));
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        self::assertEquals(CalloutSession::$RINGING, $callout->getState());
        self::assertEquals(array('error' => true, 'reason' => 'NO_SESSION_ID_FOUND'), $calloutHoldService->ringing('invalid'));

    }

    public function testOccupied(): void
    {
        $kernel = self::bootKernel();


        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        self::assertEquals(array(
            'status' => 'ON_HOLD',
            'pin' => '987654321',
            'room_number' => '12340',
            'links' => array(),
        ), $calloutHoldService->occupied('ksdlfjlkfds'));
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        self::assertEquals(CalloutSession::$OCCUPIED, $callout->getState());
        self::assertEquals(array('error' => true, 'reason' => 'NO_SESSION_ID_FOUND'), $calloutHoldService->occupied('invalid'));

    }

    public function testTimeout(): void
    {
        $kernel = self::bootKernel();


        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        self::assertEquals(array(
            'status' => 'ON_HOLD',
            'pin' => '987654321',
            'room_number' => '12340',
            'links' => array(),
        ), $calloutHoldService->timeout('ksdlfjlkfds'));
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        self::assertEquals(CalloutSession::$TIMEOUT, $callout->getState());
        self::assertEquals(array('error' => true, 'reason' => 'NO_SESSION_ID_FOUND'), $calloutHoldService->timeout('invalid'));
    }

    public function testChangeState(): void
    {
        $kernel = self::bootKernel();

        $directSend = $this->getContainer()->get(DirectSendService::class);

        $hub = new MockHub('http://localhost:3000/.well-known/mercure', new StaticTokenProvider('test'), function (Update $update): string {
            if (json_decode($update->getData(), true)['type'] === 'snackbar') {
                self::assertEquals('{"type":"snackbar","message":"testmessage","color":"info"}', $update->getData());
                self::assertEquals(['lobby_moderator/9876543210'], $update->getTopics());
            }
            if (json_decode($update->getData(), true)['type'] === 'refresh') {
                self::assertEquals('{"type":"refresh","reloadUrl":"\/room\/lobby\/moderator\/a\/9876543210 #waitingUser"}', $update->getData());
                self::assertEquals(['lobby_moderator/9876543210'], $update->getTopics());
            }
            return 'id';
        });
        $directSend->setMercurePublisher($hub);

        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));

        self::assertEquals(array(
            'status' => 'ON_HOLD',
            'pin' => '987654321',
            'room_number' => '12340',
            'links' => array(),
        ), $calloutHoldService->setCalloutSessionOnHold($callout, 30, 'testmessage'));
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        self::assertEquals(30, $callout->getState());
        self::assertEquals(2, $callout->getLeftRetries());

    }

    public function testChangeStateFailure(): void
    {
        $kernel = self::bootKernel();
        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        $callout->setState(0);
        $em = self::getContainer()->get(EntityManagerInterface::class);
        $em->persist($callout);
        $em->flush();
        self::assertEquals(array('error' => true, 'reason' => 'SESSION_NOT_IN_CORRECT_STATE'), $calloutHoldService->setCalloutSessionOnHold($callout, 30, 'testmessage'));
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        self::assertEquals(0, $callout->getState());
        self::assertEquals(2, $callout->getLeftRetries());

    }



    public function testsendMessage(): void
    {
        $kernel = self::bootKernel();

        $directSend = $this->getContainer()->get(DirectSendService::class);

        $hub = new MockHub('http://localhost:3000/.well-known/mercure', new StaticTokenProvider('test'), function (Update $update): string {

            self::assertEquals('{"type":"snackbar","message":"testmessage123","color":"info"}', $update->getData());
            self::assertEquals(['lobby_moderator/9876543210'], $update->getTopics());

            return 'id';
        });
        $directSend->setMercurePublisher($hub);

        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(array('uid' => 'ksdlfjlkfds'));
        $calloutHoldService->sendMessage($callout->getRoom(), 'testmessage123');
    }


}
