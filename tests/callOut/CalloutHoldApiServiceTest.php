<?php

namespace App\Tests\callOut;

use App\Entity\CallerId;
use App\Entity\CalloutSession;
use App\Repository\CalloutSessionRepository;
use App\Repository\RoomsRepository;
use App\Repository\UserRepository;
use App\Service\Callout\CallOutSessionAPIDialService;
use App\Service\Callout\CallOutSessionAPIHoldService;
use App\Service\Lobby\DirectSendService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Mercure\Jwt\StaticTokenProvider;
use Symfony\Component\Mercure\MockHub;
use Symfony\Component\Mercure\Update;

class CalloutHoldApiServiceTest extends KernelTestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $manager = self::getContainer()->get(EntityManagerInterface::class);
        $userRepo = self::getContainer()->get(UserRepository::class);
        $roomRepo = self::getContainer()->get(RoomsRepository::class);
        $room = $roomRepo->findOneBy(['name' => 'TestMeeting: 0']);
        $user = $userRepo->findOneBy(['email' => 'ldapUser@local.de']);

        $calloutSession1 = new CalloutSession();
        $calloutSession1->setUser($user)
            ->setRoom($room)
            ->setCreatedAt(new \DateTime())
            ->setInvitedFrom($room->getModerator())
            ->setState(10)
            ->setUid('ksdlfjlkfds')
            ->setLeftRetries(2);
        $manager->persist($calloutSession1);
        $callerUserId = new CallerId();
        $callerUserId->setCreatedAt(new \DateTime())
            ->setRoom($room)
            ->setUser($user)
            ->setCallerId('987654321');
        $manager->persist($callerUserId);
        $manager->flush();
    }

    public function testLater(): void
    {
        $kernel = self::bootKernel();


        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'pin' => '987654321',
                'room_number' => '12340',
                'links' => [
                    'back' => '/api/v1/call/out/back/ksdlfjlkfds'
                ],
            ],
            $calloutHoldService->later('ksdlfjlkfds')
        );
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        self::assertEquals(CalloutSession::$LATER, $callout->getState());
        self::assertEquals(['error' => true, 'reason' => 'NO_SESSION_ID_FOUND'], $calloutHoldService->later('invalid'));
    }

    public function testRinging(): void
    {
        $kernel = self::bootKernel();

        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $calloutSession = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);

        $calloutDialService = self::getContainer()->get(CallOutSessionAPIDialService::class);
        self::assertEquals(
            [
                'status' => 'RINGING',
                'pin' => '987654321',
                'room_number' => '12340',
                'links' => [
                    'accept' => '/api/v1/lobby/sip/pin/' . $calloutSession->getRoom()->getCallerRoom()->getCallerId() . '?caller_id=987654321012&pin=987654321',
                    'refuse' => '/api/v1/call/out/refuse/' . $calloutSession->getUid(),
                    'ringing' => '/api/v1/call/out/ringing/' . $calloutSession->getUid(),
                    'timeout' => '/api/v1/call/out/timeout/' . $calloutSession->getUid(),
                    'error' => '/api/v1/call/out/error/' . $calloutSession->getUid(),
                    'unreachable' => '/api/v1/call/out/unreachable/' . $calloutSession->getUid(),
                    'later' => '/api/v1/call/out/later/' . $calloutSession->getUid(),
                    'dial' => '/api/v1/call/out/dial/' . $calloutSession->getUid(),
                    'occupied' => '/api/v1/call/out/occupied/' . $calloutSession->getUid(),
                ]
            ],
            $calloutDialService->ringing('ksdlfjlkfds')
        );
        self::assertEquals(
            [
                'status' => 'RINGING',
                'pin' => '987654321',
                'room_number' => '12340',
                'links' => [
                    'accept' => '/api/v1/lobby/sip/pin/' . $calloutSession->getRoom()->getCallerRoom()->getCallerId() . '?caller_id=987654321012&pin=987654321',
                    'refuse' => '/api/v1/call/out/refuse/' . $calloutSession->getUid(),
                    'ringing' => '/api/v1/call/out/ringing/' . $calloutSession->getUid(),
                    'timeout' => '/api/v1/call/out/timeout/' . $calloutSession->getUid(),
                    'error' => '/api/v1/call/out/error/' . $calloutSession->getUid(),
                    'unreachable' => '/api/v1/call/out/unreachable/' . $calloutSession->getUid(),
                    'later' => '/api/v1/call/out/later/' . $calloutSession->getUid(),
                    'dial' => '/api/v1/call/out/dial/' . $calloutSession->getUid(),
                    'occupied' => '/api/v1/call/out/occupied/' . $calloutSession->getUid(),
                ]
            ],
            $calloutDialService->ringing('ksdlfjlkfds')
        );
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        self::assertEquals(CalloutSession::$RINGING, $callout->getState());
        self::assertEquals(['error' => true, 'reason' => 'NO_SESSION_ID_FOUND'], $calloutDialService->ringing('invalid'));
    }

    public function testRingingFalseState(): void
    {
        $kernel = self::bootKernel();

        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $calloutSession = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        $entitymanager = self::getContainer()->get(EntityManagerInterface::class);
        $calloutSession->setState(CalloutSession::$INITIATED);
        $entitymanager->persist($calloutSession);
        $calloutDialService = self::getContainer()->get(CallOutSessionAPIDialService::class);
        self::assertEquals(
            [
                'error' => true,
                'reason' => 'SESSION_NOT_IN_CORRECT_STATE'
            ],
            $calloutDialService->ringing('ksdlfjlkfds')
        );

        $calloutSession->setState(CalloutSession::$ON_HOLD);
        $entitymanager->persist($calloutSession);
        self::assertEquals(
            [
                'error' => true,
                'reason' => 'SESSION_NOT_IN_CORRECT_STATE'
            ],
            $calloutDialService->ringing('ksdlfjlkfds')
        );
    }


    public function testOccupied(): void
    {
        $kernel = self::bootKernel();


        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'pin' => '987654321',
                'room_number' => '12340',
                'links' => [
                    'back' => '/api/v1/call/out/back/ksdlfjlkfds'
                ],
            ],
            $calloutHoldService->occupied('ksdlfjlkfds')
        );
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        self::assertEquals(CalloutSession::$OCCUPIED, $callout->getState());
        self::assertEquals(['error' => true, 'reason' => 'NO_SESSION_ID_FOUND'], $calloutHoldService->occupied('invalid'));
    }

    public function testTimeout(): void
    {
        $kernel = self::bootKernel();


        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'pin' => '987654321',
                'room_number' => '12340',
                'links' => [
                    'back' => '/api/v1/call/out/back/ksdlfjlkfds'
                ],
            ],
            $calloutHoldService->timeout('ksdlfjlkfds')
        );
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        self::assertEquals(CalloutSession::$TIMEOUT, $callout->getState());
        self::assertEquals(['error' => true, 'reason' => 'NO_SESSION_ID_FOUND'], $calloutHoldService->timeout('invalid'));
    }

    public function testChangeState(): void
    {
        $kernel = self::bootKernel();

        $directSend = $this->getContainer()->get(DirectSendService::class);

        $hub = new MockHub(
            'http://localhost:3000/.well-known/mercure',
            new StaticTokenProvider('test'),
            function (Update $update): string {
                if (json_decode($update->getData(), true)['type'] === 'snackbar') {
                    self::assertEquals('{"type":"snackbar","message":"testmessage","color":"info","closeAfter":2000}', $update->getData());
                    self::assertEquals(['lobby_moderator/9876543210'], $update->getTopics());
                }
                if (json_decode($update->getData(), true)['type'] === 'refresh') {
                    self::assertEquals('{"type":"refresh","reloadUrl":"\/room\/lobby\/moderator\/a\/9876543210 #waitingUser"}', $update->getData());
                    self::assertEquals(['lobby_moderator/9876543210'], $update->getTopics());
                }
                return 'id';
            }
        );
        $directSend->setMercurePublisher($hub);

        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);

        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'pin' => '987654321',
                'room_number' => '12340',
                'links' => [
                    'back' => '/api/v1/call/out/back/ksdlfjlkfds'
                ],
            ],
            $calloutHoldService->setCalloutSessionOnHold($callout, 30, 'testmessage')
        );
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        self::assertEquals(30, $callout->getState());
        self::assertEquals(2, $callout->getLeftRetries());
    }

    public function testChangeStateFailure(): void
    {
        $kernel = self::bootKernel();
        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        $callout->setState(0);
        $em = self::getContainer()->get(EntityManagerInterface::class);
        $em->persist($callout);
        $em->flush();
        self::assertEquals(['error' => true, 'reason' => 'SESSION_NOT_IN_CORRECT_STATE'], $calloutHoldService->setCalloutSessionOnHold($callout, 30, 'testmessage'));
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        self::assertEquals(0, $callout->getState());
        self::assertEquals(2, $callout->getLeftRetries());
    }


    public function testsendMessage(): void
    {
        $kernel = self::bootKernel();

        $directSend = $this->getContainer()->get(DirectSendService::class);

        $hub = new MockHub(
            'http://localhost:3000/.well-known/mercure',
            new StaticTokenProvider('test'),
            function (Update $update): string {

                self::assertEquals('{"type":"snackbar","message":"testmessage123","color":"info","closeAfter":2000}', $update->getData());
                self::assertEquals(['lobby_moderator/9876543210'], $update->getTopics());

                return 'id';
            }
        );
        $directSend->setMercurePublisher($hub);

        $calloutHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        $calloutHoldService->sendMessage($callout->getRoom(), 'testmessage123');
    }
}
