<?php

namespace App\Tests\callOut;

use App\Entity\CallerId;
use App\Entity\CalloutSession;
use App\Repository\CallerIdRepository;
use App\Repository\CalloutSessionRepository;
use App\Repository\RoomsRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class CalloutApiActionControllerTest extends WebTestCase
{
    private $client;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = static::createClient([], [
            'HTTP_AUTHORIZATION' => 'Bearer 123456',
        ]);
        $manager = self::getContainer()->get(EntityManagerInterface::class);
        $userRepo = self::getContainer()->get(UserRepository::class);
        $roomRepo = self::getContainer()->get(RoomsRepository::class);
        $room = $roomRepo->findOneBy(array('name' => 'TestMeeting: 0'));
        $user = $userRepo->findOneBy(array('email' => 'ldapUser@local.de'));

        $calloutSession1 = new CalloutSession();
        $calloutSession1->setUser($user)
            ->setRoom($room)
            ->setCreatedAt(new \DateTime())
            ->setInvitedFrom($room->getModerator())
            ->setState(1)
            ->setUid('ksdlfjlkfds')
            ->setLeftRetries(2);
        $manager->persist($calloutSession1);
        $callerUserId = new CallerId();
        $callerUserId->setCreatedAt(new \DateTime())
            ->setRoom($room)
            ->setUser($user)
            ->setCallerId('987654321');
        $manager->persist($callerUserId);
        $manager->flush();
    }

    public function testDialin(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        self::assertEquals(array(
            'status' => 'OK',
            'links' => array('accept' => '/api/v1/lobby/sip/pin/12340?caller_id=987654321012&pin=987654321',
                'refuse' => '/api/v1/call/out/refuse/ksdlfjlkfds',
                'timeout' => '/api/v1/call/out/timeout/ksdlfjlkfds',
                'error' => '/api/v1/call/out/error/ksdlfjlkfds',
                'later' => '/api/v1/call/out/later/ksdlfjlkfds',
                'dial' => '/api/v1/call/out/dial/ksdlfjlkfds',
                'occupied' => '/api/v1/call/out/occupied/ksdlfjlkfds'
            ),
        ), json_decode($this->client->getResponse()->getContent(), true));
    }

    public function testError(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/error/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        self::assertEquals(array(
            'status' => 'DELETED',
            'links' => array(),
        ), json_decode($this->client->getResponse()->getContent(), true));
    }
    public function testrefuse(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/refuse/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        self::assertEquals(array(
            'status' => 'DELETED',
            'links' => array(),
        ), json_decode($this->client->getResponse()->getContent(), true));
    }

    public function testTimeout(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/timeout/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        self::assertEquals(array(
            'status' => 'ON_HOLD',
            'links' => array(),
            'pin' => '987654321',
            'room_number' => '12340',
        ), json_decode($this->client->getResponse()->getContent(), true));
    }

    public function testLater(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/later/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        self::assertEquals(array(
            'status' => 'ON_HOLD',
            'links' => array(),
            'pin' => '987654321',
            'room_number' => '12340',
        ), json_decode($this->client->getResponse()->getContent(), true));
    }
    public function testOccupied(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/occupied/ksdlfjlkfds');
        $this->assertResponseIsSuccessful();
        self::assertEquals(array(
            'status' => 'ON_HOLD',
            'links' => array(),
            'pin' => '987654321',
            'room_number' => '12340',
        ), json_decode($this->client->getResponse()->getContent(), true));
    }
}
