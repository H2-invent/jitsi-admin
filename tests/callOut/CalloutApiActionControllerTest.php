<?php

namespace App\Tests\callOut;

use App\Entity\CallerId;
use App\Entity\CalloutSession;
use App\Entity\User;
use App\Repository\CalloutSessionRepository;
use App\Repository\RoomsRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use function PHPUnit\Framework\assertEquals;

class CalloutApiActionControllerTest extends WebTestCase
{
    private $client;
    private $room;
    private $authHEader;
    private CalloutSession $calloutSession;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->authHEader = [
            'HTTP_AUTHORIZATION' => "Bearer 123456",
        ];
        $this->client = static::createClient();
        $manager = self::getContainer()->get(EntityManagerInterface::class);
        $userRepo = self::getContainer()->get(UserRepository::class);
        $roomRepo = self::getContainer()->get(RoomsRepository::class);
        $this->room = $roomRepo->findOneBy(['name' => 'This is a room with Lobby']);
        $user = $userRepo->findOneBy(['email' => 'ldapUser@local.de']);
        $moderator = $userRepo->findOneBy(['email' => 'test@local.de']);
        $this->client->loginUser($moderator);
        $callerUserId = new CallerId();
        $callerUserId->setCreatedAt(new \DateTime())
            ->setRoom($this->room)
            ->setUser($user)
            ->setCallerId('987654321');
        $manager->persist($callerUserId);
        $manager->flush();

        $invite = $userRepo->findOneBy(['email' => 'ldapUser@local.de']);
        $crawler = $this->client->request('POST', '/room/callout/invite/' . $this->room->getUidReal(), ['uid' => $invite->getEmail()]);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $this->calloutSession = $calloutRepo->findOneBy(['room' => $this->room, 'user' => $invite]);
    }

    public function testDialin(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'OK',
                'links' => ['accept' => '/api/v1/lobby/sip/pin/' . $this->calloutSession->getRoom()->getCallerRoom()->getCallerId() . '?caller_id=987654321012&pin=987654321',
                    'refuse' => '/api/v1/call/out/refuse/' . $this->calloutSession->getUid(),
                    'timeout' => '/api/v1/call/out/timeout/' . $this->calloutSession->getUid(),
                    'error' => '/api/v1/call/out/error/' . $this->calloutSession->getUid(),
                    'later' => '/api/v1/call/out/later/' . $this->calloutSession->getUid(),
                    'dial' => '/api/v1/call/out/dial/' . $this->calloutSession->getUid(),
                    'occupied' => '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(),
                    'ringing' => '/api/v1/call/out/ringing/' . $this->calloutSession->getUid(),
                    'unreachable' => '/api/v1/call/out/unreachable/' . $this->calloutSession->getUid()
                ],
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
    }

    public function testError(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $crawler = $this->client->request('GET', '/api/v1/call/out/error/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'DELETED',
                'links' => [],
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(0, $crawler->filter('.calloutsymbol')->count());
    }

    public function testUnreachable(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $crawler = $this->client->request('GET', '/api/v1/call/out/unreachable/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'DELETED',
                'links' => [],
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(0, $crawler->filter('.calloutsymbol')->count());
    }


    public function testrefuse(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $crawler = $this->client->request('GET', '/api/v1/call/out/refuse/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'DELETED',
                'links' => [],
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        assertEquals(0, $crawler->filter('.calloutsymbol')->count());
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(0, $crawler->filter('.calloutsymbol')->count());
    }

    public function testTimeout(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $crawler = $this->client->request('GET', '/api/v1/call/out/timeout/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'links' => [
                    'back' => '/api/v1/call/out/back/' . $this->calloutSession->getUid()
                ],
                'pin' => '987654321',
                'room_number' => $this->room->getCallerRoom()->getCallerId(),
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());

        $this->assertSelectorTextContains('.calloutsymbol .badge', 'Nicht abgenommen');
    }

    public function testLater(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $crawler = $this->client->request('GET', '/api/v1/call/out/later/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'links' => [
                    'back' => '/api/v1/call/out/back/' . $this->calloutSession->getUid()
                ],
                'pin' => '987654321',
                'room_number' => $this->room->getCallerRoom()->getCallerId(),
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );

        $this->client->loginUser(new User());
        $user = $this->calloutSession->getRoom()->getModerator();

        $this->client->loginUser($user);
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $this->assertSelectorTextContains('.calloutsymbol .badge', 'SpÃ¤ter');
    }

    public function testBack(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $crawler = $this->client->request('GET', '/api/v1/call/out/later/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'links' => [
                    'back' => '/api/v1/call/out/back/' . $this->calloutSession->getUid()
                ],
                'pin' => '987654321',
                'room_number' => $this->room->getCallerRoom()->getCallerId(),
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );

        $this->client->loginUser(new User());
        $user = $this->calloutSession->getRoom()->getModerator();

        $this->client->loginUser($user);
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $this->assertSelectorTextContains('.calloutsymbol .badge', 'SpÃ¤ter');

        $crawler = $this->client->request('GET', '/api/v1/call/out/back/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'DIALED',
                'links' => ['accept' => '/api/v1/lobby/sip/pin/' . $this->calloutSession->getRoom()->getCallerRoom()->getCallerId() . '?caller_id=987654321012&pin=987654321',
                    'refuse' => '/api/v1/call/out/refuse/' . $this->calloutSession->getUid(),
                    'timeout' => '/api/v1/call/out/timeout/' . $this->calloutSession->getUid(),
                    'error' => '/api/v1/call/out/error/' . $this->calloutSession->getUid(),
                    'later' => '/api/v1/call/out/later/' . $this->calloutSession->getUid(),
                    'dial' => '/api/v1/call/out/dial/' . $this->calloutSession->getUid(),
                    'occupied' => '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(),
                    'ringing' => '/api/v1/call/out/ringing/' . $this->calloutSession->getUid(),
                    'unreachable' => '/api/v1/call/out/unreachable/' . $this->calloutSession->getUid()
                ],
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
    }

    public function testRinging(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol .fa-phone')->count());
        $crawler = $this->client->request('GET', '/api/v1/call/out/ringing/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'RINGING',
                'pin' => '987654321',
                'room_number' => $this->room->getCallerRoom()->getCallerId(),
                'links' => [
                    'accept' => '/api/v1/lobby/sip/pin/' . $this->calloutSession->getRoom()->getCallerRoom()->getCallerId() . '?caller_id=987654321012&pin=987654321',
                    'refuse' => '/api/v1/call/out/refuse/' . $this->calloutSession->getUid(),
                    'ringing' => '/api/v1/call/out/ringing/' . $this->calloutSession->getUid(),
                    'timeout' => '/api/v1/call/out/timeout/' . $this->calloutSession->getUid(),
                    'error' => '/api/v1/call/out/error/' . $this->calloutSession->getUid(),
                    'unreachable' => '/api/v1/call/out/unreachable/' . $this->calloutSession->getUid(),
                    'later' => '/api/v1/call/out/later/' . $this->calloutSession->getUid(),
                    'dial' => '/api/v1/call/out/dial/' . $this->calloutSession->getUid(),
                    'occupied' => '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(),
                ]
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );

        $this->client->loginUser(new User());
        $user = $this->calloutSession->getRoom()->getModerator();

        $this->client->loginUser($user);
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $this->assertSelectorExists('.calloutsymbol .fa-bell');


        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol .fa-bell')->count());
        assertEquals(0, $crawler->filter('.calloutsymbol .fa-phone')->count());
    }

    public function testOccupied(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'status' => 'ON_HOLD',
                'links' => [
                    'back' => '/api/v1/call/out/back/' . $this->calloutSession->getUid()
                ],
                'pin' => '987654321',
                'room_number' => $this->room->getCallerRoom()->getCallerId(),
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        $user = $this->calloutSession->getRoom()->getModerator();
        $this->client->loginUser($user);
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $this->assertSelectorTextContains('.calloutsymbol .badge', 'Besetzt');
    }

    public function testOccupiedthreeTimes(): void
    {
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $user = $this->calloutSession->getRoom()->getModerator();
        $this->client->loginUser($user);
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $this->assertSelectorNotExists('.no-more-retries');

        $crawler = $this->client->request('POST', '/room/callout/invite/' . $this->room->getUidReal(), ['uid' => $this->calloutSession->getUser()->getEmail()]);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        $this->assertSelectorNotExists('.no-more-retries');

        $crawler = $this->client->request('POST', '/room/callout/invite/' . $this->room->getUidReal(), ['uid' => $this->calloutSession->getUser()->getEmail()]);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        $this->assertSelectorTextContains('.no-more-retries', 'Keine weiteren Anrufversuche mÃ¶glich');

        $crawler = $this->client->request('POST', '/room/callout/invite/' . $this->room->getUidReal(), ['uid' => $this->calloutSession->getUser()->getEmail()]);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/dial/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        $crawler = $this->client->request('GET', '/api/v1/call/out/occupied/' . $this->calloutSession->getUid(), [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();


        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
        $this->assertSelectorTextContains('.no-more-retries', 'Keine weiteren Anrufversuche mÃ¶glich');
    }

    public function testDialPoolEmpty(): void
    {
        $this->client->request('GET', '/api/v1/call/out/dial/', [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'calls' => []
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
    }

    public function testOnHoldPoolEmpty(): void
    {
        $this->client->request('GET', '/api/v1/call/out/on_hold/', [], [], $this->authHEader);
        $this->assertResponseIsSuccessful();
        self::assertEquals(
            [
                'calls' => []
            ],
            json_decode($this->client->getResponse()->getContent(), true)
        );
        $url = '/room/join/b/' . $this->room->getId();
        $crawler = $this->client->request('GET', $url);
        assertEquals(1, $crawler->filter('.calloutsymbol')->count());
    }
}
