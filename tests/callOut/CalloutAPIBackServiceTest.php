<?php

namespace App\Tests\callOut;

use App\Entity\CallerId;
use App\Entity\CalloutSession;
use App\Repository\CalloutSessionRepository;
use App\Repository\RoomsRepository;
use App\Repository\UserRepository;
use App\Service\Callout\CallOutSessionAPIDialService;
use App\Service\Callout\CallOutSessionAPIHoldService;
use App\Service\Callout\CallOutSessionAPIRemoveService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class CalloutAPIBackServiceTest extends KernelTestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $manager = self::getContainer()->get(EntityManagerInterface::class);
        $userRepo = self::getContainer()->get(UserRepository::class);
        $roomRepo = self::getContainer()->get(RoomsRepository::class);
        $room = $roomRepo->findOneBy(['name' => 'TestMeeting: 0']);
        $user = $userRepo->findOneBy(['email' => 'ldapUser@local.de']);

        $calloutSession1 = new CalloutSession();
        $calloutSession1->setUser($user)
            ->setRoom($room)
            ->setCreatedAt(new \DateTime())
            ->setInvitedFrom($room->getModerator())
            ->setState(0)
            ->setUid('ksdlfjlkfds')
            ->setLeftRetries(2);
        $manager->persist($calloutSession1);
        $callerUserId = new CallerId();
        $callerUserId->setCreatedAt(new \DateTime())
            ->setRoom($room)
            ->setUser($user)
            ->setCallerId('987654321');
        $manager->persist($callerUserId);
        $manager->flush();
    }

    public function testSessionBackSuccess(): void
    {
        $kernel = self::bootKernel();

        $this->assertSame('test', $kernel->getEnvironment());
        $calloutDialService = self::getContainer()->get(CallOutSessionAPIDialService::class);
        $calloutDialService->dialSession('ksdlfjlkfds');
        $calloutOnHoldService = self::getContainer()->get(CallOutSessionAPIHoldService::class);
        $calloutOnHoldService->later('ksdlfjlkfds');
        self::assertEquals(
            ['status' => 'DIALED', 'links' => [
                'accept' => '/api/v1/lobby/sip/pin/12340?caller_id=987654321012&pin=987654321',
                'refuse' => '/api/v1/call/out/refuse/ksdlfjlkfds',
                'timeout' => '/api/v1/call/out/timeout/ksdlfjlkfds',
                'error' => '/api/v1/call/out/error/ksdlfjlkfds',
                'later' => '/api/v1/call/out/later/ksdlfjlkfds',
                'dial' => '/api/v1/call/out/dial/ksdlfjlkfds',
                'occupied' => '/api/v1/call/out/occupied/ksdlfjlkfds',
                'ringing' => '/api/v1/call/out/ringing/ksdlfjlkfds',
                'unreachable' => '/api/v1/call/out/unreachable/ksdlfjlkfds'
            ]],
            $calloutDialService->backSession('ksdlfjlkfds')
        );
    }

    public function testSessionBackDialFail(): void
    {
        $kernel = self::bootKernel();

        $this->assertSame('test', $kernel->getEnvironment());
        $calloutDialService = self::getContainer()->get(CallOutSessionAPIDialService::class);
        $calloutDialService->dialSession('ksdlfjlkfds');
        self::assertEquals(
            [
                'error' => true,
                'reason' => 'SESSION_NOT_IN_CORRECT_STATE',

            ],
            $calloutDialService->backSession('ksdlfjlkfds')
        );
    }

    public function testSessionBackAfterremove(): void
    {
        $kernel = self::bootKernel();

        $this->assertSame('test', $kernel->getEnvironment());
        $calloutDialService = self::getContainer()->get(CallOutSessionAPIDialService::class);
        $calloutDialService->dialSession('ksdlfjlkfds');
        $calloutRemoveService = self::getContainer()->get(CallOutSessionAPIRemoveService::class);
        $calloutRepo = self::getContainer()->get(CalloutSessionRepository::class);
        $callout = $calloutRepo->findOneBy(['uid' => 'ksdlfjlkfds']);
        $calloutRemoveService->removeCalloutSession($callout, 'testmessage');
        self::assertEquals(
            [
                'error' => true,
                'reason' => 'NO_SESSION_ID_FOUND',

            ],
            $calloutDialService->backSession('ksdlfjlkfds')
        );
    }
}
